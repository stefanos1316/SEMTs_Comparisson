#!/bin/bash

#This script will execute and measure applications or process energy consumption in order to generate graphs.

###############################################################################################################################################
##						CHECKING COMMAND LINE ARGUMENTS								     ##
###############################################################################################################################################
if [ "$1" == "-h" ] || [ "$1" == "-help" ] || [ "$1" == "--help" ] || [ "$1" == "--h" ]; then
	echo "--arguments     If luanching a new application and arguments are needed (enclose all"
	echo "	        arguments in double quotes \" and separate with spaces)"
	echo "--application	Full path where the application's source code is found"
	echo "--duration      Durations time for monitoring a process"
	echo "--logs		Full path where all the log files form the monitoring process are stored"
	echo "--process	Provide the PID of a running process"
	echo "--comparing	Add the full path of a different implementation of the same application"
	echo "		in order to compare them"
	exit
fi

if [ "$#" -lt 3 ]; then
	echo "Illegal number of command line arguments"
	exit
fi

#Get all arguments
args=("$@") 

#Get number of elements 
ELEMENTS=${#args[@]} 

#Initiallize parameters
arguments=0
applicationPath=0
duration=0
logsPath=0
processID=0
comparing=0

# echo each element in array  
# for lQsds
for (( i=0;i<$ELEMENTS;++i)); do  

	case "${args[${i}]}" in 
	("--arguments") arguments=${args[i+1]} ;;
	("--application") applicationPath="${args[i+1]}" ;;
	("--duration") duration="${args[i+1]}" ;;
	("--logs") logsPath="${args[i+1]}" ;;
	("--process") processID="${args[i+1]}" ;;
	("--comparing") comparing="${args[i+1]}" ;;
	esac
done

#Second validation of parameters
if [ "$applicationPath" == "0" ] && [ "$process" == "0" ];
#Which means user gave both application and process
then
	echo "Error: Provide only application's source code or process ID to monitor"
	exit
fi  

IFS=" " read -a arrayOfArguments <<< "$arguments"
applicationsName=$(echo $applicationPath | awk -F "/" '{print $NF}' | awk -F "." '{print $1}' )
otherCommandLineArguments=$(echo $arguments | tr ' ' '_')
###############################################################################################################################################


#Drive to power-cli directory
cd ../../powerapi-cli/bin/
#Remove power_for_$applicationsName.txt if exists
rm power_for_$applicationsName*.txt

###############################################################################################################################################
##						CREATING LOG FILES									     ##
###############################################################################################################################################
#Creating new Directory for the log files
powerAPILogDirDate="$(date -u | sed -e 's/ /_/g')" 
powerAPILogDirName=$logsPath/"PowerAPI_ALL_LOG_FILES_"$powerAPILogDirDate"_application_"$applicationsName"_arguments_"$otherCommandLineArguments
powerAPILogDirCreate="$(mkdir -p $powerAPILogDirName)"
eval=$powerAPILogDirCreate
echo "Log Directory $powerAPILogDirName is created"
###############################################################################################################################################


###############################################################################################################################################
##						ALL FUNCTIONS ARE HERE									     ##
###############################################################################################################################################
function getProcessID {
pgrep java | awk '{print $NF}' 
}

function callPowerAPI {
duration="$1"
PID="$2"
./powerapi modules procfs-cpu-simple monitor --frequency 1000 --pids $PID --agg max --console duration $duration >> power_for_$applicationsName$2.txt
}

function callPlotRealTimeGraphs {
	#If even one is running
if [ "$#" -lt 2 ];
then
	while  ps -p $1 > /dev/null ;
        do
                sleep 1;
                tail -1  power_for_$applicationsName$1.txt;
                done | awk -F "=" '{print $NF; fflush()}'| feedGnuplot --lines --stream --title "Monioting of $applicationsName Power Consumption, PID: $1" --legend 0 "CPU" --xlen 10 --ylabel 'Power (Watts)' --xlabel 'Time (seconds)' --exit
else
	while  ps -p $1 > /dev/null && ps -p $2 > /dev/null ;
	do
		sleep 1;
        	result_1=$(tail -1  power_for_$applicationsName$1.txt | awk -F "=" '{print $NF}' | awk -F ";" '{print $1}');
        	result_2=$(tail -1  power_for_$applicationsName$2.txt | awk -F "=" '{print $NF}' | awk -F ";" '{print $1}');
		echo "$result_1	$result_2"
	done |  feedGnuplot --lines --stream --title "Comparing Power Consumption of PID$1 and PID:$2" --legend 0 "PID:$1" --legend 1 "PID:$2" --xlen 10 --ylabel 'Power (Watts)' --xlabel 'Time (seconds)' --exit 
fi
}
###############################################################################################################################################


###############################################################################################################################################
##						CALLING FUNCTIONS									     ##
###############################################################################################################################################
#Check if comparing argument is given
pid=0
pid_1=0
pid_2=0
if [ $comparing -eq 0 ];
then
	java -jar $applicationPath $arguments &
	#Get PID of the above command
	pid=$!
	echo "Process id is $pid"
	callPowerAPI $duration $pid &
	callPlotRealTimeGraphs $pid &
	wait $(jobs -p)
else
	java -jar $applicationPath $arguments &	
	pid_1=$!
	java -jar $comparing $arguments &
	pid_2=$!
	callPowerAPI $duration $pid_1 &
	callPowerAPI $duration $pid_2 &
	callPlotRealTimeGraphs $pid_1 $pid_2 &
	wait $(jobs -p)
fi

echo "Done exeuting script all resutls can be found in $powerAPILogDirName"
###############################################################################################################################################

#Move all the collected results in the proper file
if [ $comparing -eq 0 ];
then
	mv power_for_$applicationsName$pid.txt $powerAPILogDirName
else
	mv power_for_$applicationsName$pid_1.txt $powerAPILogDirName
	mv power_for_$applicationsName$pid_2.txt $powerAPILogDirName
fi
echo "Exiting..."

exit
