#!/bin/bash

#This script will execute and measure applications or process energy consumption in order to generate graphs.

###############################################################################################################################################
##						CHECKING COMMAND LINE ARGUMENTS								     ##
###############################################################################################################################################
if [ "$1" == "-h" ] || [ "$1" == "-help" ] || [ "$1" == "--help" ] || [ "$1" == "--h" ]; then
	echo "--arguments     For more that one arguments (for an applications) use double quotes to "
	echo "	        at the begging and the ending and separate with spaces"
	echo "--application	Full path where the application's source code is found"
	echo "--duration      Durations time for monitoring a process, if not set then the duration will"
	echo "		equal to the application's execution time"
	echo "--logs		Full path where all the log files form the monitoring process are stored"
	echo "--process	Provide the PID of a running process"
	echo "--comparing	Add the full path of a different implementation of the same application"
	echo "		in order to compare them, command line agruments for this program must are used from"
	echo "		the --arguments option."
	exit
fi

if [ "$#" -lt 3 ]; then
	echo "Illegal number of command line arguments"
	exit
fi

#Get all arguments
args=("$@") 

#Get number of elements 
ELEMENTS=${#args[@]} 

#Initiallize parameters
arguments="0"
applicationPath="0"
duration="0"
logsPath="0"
processID="0"
comparing="0"

# echo each element in array  
# for lQsds
for (( i=0;i<$ELEMENTS;++i)); do  

	case "${args[${i}]}" in 
	("--arguments") arguments=${args[i+1]} ;;
	("--application") applicationPath="${args[i+1]}" ;;
	("--duration") duration="${args[i+1]}" ;;
	("--logs") logsPath="${args[i+1]}" ;;
	("--process") processID="${args[i+1]}" ;;
	("--comparing") comparing="${args[i+1]}" ;;
	esac
done

#If duration is 0 then add a large number by default and by the end of the appliation's execution it will be terminated
if [ "$duration" == "0" ]; then
	#adding number close to 24 hours 
	duration=86400
fi

#Second validation of parameters
if [ "$applicationPath" ==  "0" ] && [ "$processID" == "0" ];
#Which means user gave both application and process
then
	echo "Error: Provide only application's source code or process ID to monitor"
	exit
fi  

IFS=" " read -a arrayOfArguments <<< "$arguments"
applicationsName=$(echo $applicationPath | awk -F "/" '{print $NF}' | awk -F "." '{print $1}' )
otherCommandLineArguments=$(echo $arguments | tr ' ' '_')
###############################################################################################################################################


#Drive to power-cli directory
cd ../../powerapi-cli/bin/
#Remove power_for_$applicationsName.txt if exists
rm power_for_$applicationsName*.txt

###############################################################################################################################################
##						CREATING LOG FILES									     ##
###############################################################################################################################################
#Creating new Directory for the log files
powerAPILogDirDate="$(date -u | sed -e 's/ /_/g')" 
powerAPILogDirName=$logsPath/"PowerAPI_ALL_LOG_FILES_"$powerAPILogDirDate"_application_"$applicationsName"_arguments_"$otherCommandLineArguments
powerAPILogDirCreate="$(mkdir -p $powerAPILogDirName)"
eval=$powerAPILogDirCreate
echo "Log Directory $powerAPILogDirName is created"
###############################################################################################################################################


###############################################################################################################################################
##						ALL FUNCTIONS ARE HERE									     ##
###############################################################################################################################################
function getProcessID {
pgrep java | awk '{print $NF}' 
}

function callPowerAPI {
duration="$1"
PID="$2"
./powerapi modules procfs-cpu-simple monitor --frequency 1000 --pids $PID --agg max --console duration $duration >> power_for_$applicationsName$2.txt & 
POWER_API=$!

while ps -p $2 > /dev/null; 
do
	sleep 1
done

kill -9 $POWER_API

}

function callPlotRealTimeGraphs {
	#If even one is running
if [ "$#" -lt 2 ];
then
	while  ps -p $1 > /dev/null ;
        do
                sleep 1;
                tail -1  power_for_$applicationsName$1.txt;
                done | awk -F "=" '{print $NF; fflush()}'| feedGnuplot --lines --stream --title "Monioting of $applicationsName Power Consumption, PID: $1" --legend 0 "CPU" --xlen 20 --ylabel 'Power (Watts)' --xlabel 'Time (seconds)' --exit
else
	while  ps -p $1 > /dev/null && ps -p $2 > /dev/null ;
	do
		sleep 1;
        	result_1=$(tail -1  power_for_$applicationsName$1.txt | awk -F "=" '{print $NF}' | awk -F ";" '{print $1}');
        	result_2=$(tail -1  power_for_$applicationsName$2.txt | awk -F "=" '{print $NF}' | awk -F ";" '{print $1}');
		echo "$result_1	$result_2"
	done |  feedGnuplot --lines --stream --title "Comparing Power Consumption of PID$1 and PID:$2" --legend 0 "PID:$1" --legend 1 "PID:$2" --xlen 20 --ylabel 'Power (Watts)' --xlabel 'Time (seconds)' --exit 
fi
}

#This functions get resource usage such as CPU and MEM of a process and stores them in file
function getResourceUsage {
	pid_1=$1
	if [ "$#" -eq "1" ]; then 
		while ps -p $1 > /dev/null;
		do
			sleep 1
			currentTimeStamp=$(date -u | sed -e 's/ /_/g')
			currentResource=$(ps -p $pid_1 -o %cpu,%mem | tail -1)
			echo $currentTimeStamp" "$currentResource >> resourceUsage_$pid_1.txt
		done	
	else
		pid_2=$2
		while ps -p $pid_1 > /dev/null && ps -p $pid_2 > /dev/null;
		do
			sleep 1
			currentTimeStamp=$(date -u | sed -e 's/ /_/g')
			currentResource1=$(ps -p $pid_1 -o %cpu,%mem | tail -1)
			currentResource2=$(ps -p $pid_2 -o %cpu,%mem | tail -1)
			echo $currentTimeStamp" "$currentResource1 >> resourceUsage_$pid_1.txt
			echo $currentTimeStamp" "$currentResource2 >> resourceUsage_$pid_2.txt
		done
	fi

	#In case %CPU %MEM is stored as the last line in both files the remote lines
	sed -i '''/%CPU %MEM/d' resourceUsage_*
}
###############################################################################################################################################


###############################################################################################################################################
##						CALLING FUNCTIONS									     ##
###############################################################################################################################################
#Check if comparing argument is given
pid=0
pid_1=0
pid_2=0
if [ "$comparing" == "0" ];
then
	#time command added in order to get more data such as memory usage, page fault, and context switching
	/usr/bin/time -v java -jar $applicationPath $arguments 2>timeCommandData.txt &
        #Since our applications, now, is the child process of time, we have to extract it using the following lines
	aoutpid=$(pgrep -P $!)
	pid=$(ps -o pid w -p $aoutpid | tail -1)

	#Passing the process id
	getResourceUsage $pid &
	callPowerAPI $duration $pid &
	callPlotRealTimeGraphs $pid &
	wait $(jobs -p)
else
	/usr/bin/time -v java -jar $applicationPath $arguments 2>timeCommandData_1.txt &	
	timePID_1=$(pgrep -P $!)
	pid_1=$(ps -o pid w -p $timePID_1 | tail -1)

	/usr/bin/time -v java -jar $comparing $arguments 2>timeCommandData_2.txt &
	timePID_2=$(pgrep -P $!)
	pid_2=$(ps -o pid w -p $timePID_2 | tail -1)
	
	getResourceUsage $pid_1 $pid_2 &
	callPowerAPI $duration $pid_1 &
	callPowerAPI $duration $pid_2 &
	callPlotRealTimeGraphs $pid_1 $pid_2 &
	wait $(jobs -p)
fi

echo "Done exeuting script all resutls can be found in $powerAPILogDirName"

###############################################################################################################################################
#				MOVING FILES IN THE RESULTS FOLDER									      #
###############################################################################################################################################

#Move all the collected results in the proper file
if [ "$comparing" == "0" ];
then
	echo "Comparing is 0 and PID is $pid"
	mv power_for_$applicationsName$pid.txt $powerAPILogDirName
	mv resourceUsage_$pid.txt $powerAPILogDirName
	mv timeCommandData.txt $powerAPILogDirName/timeCommandData_$pid.txt
else
	mv power_for_$applicationsName$pid_1.txt $powerAPILogDirName
	mv power_for_$applicationsName$pid_2.txt $powerAPILogDirName
	mv resourceUsage_$pid_1.txt $powerAPILogDirName
	mv resourceUsage_$pid_2.txt $powerAPILogDirName
	mv timeCommandData_1.txt $powerAPILogDirName/timeCommand_$pid_1.txt
	mv timeCommandData_2.txt $powerAPILogDirName/timeCommand_$pid_2.txt
fi
echo "Exiting..."

exit
