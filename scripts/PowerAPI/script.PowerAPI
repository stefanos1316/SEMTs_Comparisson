#!/bin/bash

#This script will execute and measure applications or process energy consumption in order to generate graphs.

###############################################################################################################################################
##						CHECKING COMMAND LINE ARGUMENTS								     ##
###############################################################################################################################################
if [ "$1" == "-h" ] || [ "$1" == "-help" ] || [ "$1" == "--help" ] || [ "$1" == "--h" ]; then
	echo "--arguments     If luanching a new application and arguments are needed (enclose all"
	echo "	        arguments in double quotes \" and separate with spaces)"
	echo "--application	Full path where the application's source code is found"
	echo "--duration      Durations time for monitoring a process"
	echo "--language	Specify in which programming language the application is written"
	echo "--logs		Full path where all the log files form the monitoring process are stored"
	echo "--process	Provide the PID of a running process"
	exit
fi

if [ "$#" -lt 3 ]; then
	echo "Illegal number of command line arguments"
	exit
fi

#Get all arguments
args=("$@") 

#Get number of elements 
ELEMENTS=${#args[@]} 

#Initiallize parameters
arguments=0
applicationPath=0
duration=0
programmingLanguage=0
logsPath=0
processID=0

# echo each element in array  
# for lQsds
for (( i=0;i<$ELEMENTS;++i)); do  

	case "${args[${i}]}" in 
	("--arguments") arguments=${args[i+1]} ;;
	("--application") applicationPath="${args[i+1]}" ;;
	("--duration") duration="${args[i+1]}" ;;
	("--language") programmingLanguage="${args[i+1]}" ;;
	("--logs") logsPath="${args[i+1]}" ;;
	("--process") processID="${args[i+1]}" ;;
	esac
done

#Second validation of parameters
if [ $applicationPath -ne 0 ] && [ $process -ne 0 ];
#Which means user gave both application and process
then
	echo "Error: Provide only application's source code or process ID to monitor"
	exit
fi  

IFS=" " read -a arrayOfArguments <<< "$arguments"
applicationsName=$(echo $applicationPath | awk -F "/" '{print $NF}' | awk -F "." '{print $1}' )
otherCommandLineArguments=$(echo $arguments | tr ' ' '_')
###############################################################################################################################################


#Drive to power-cli directory
cd ../../powerapi-cli/bin/


###############################################################################################################################################
##						CREATING LOG FILES									     ##
###############################################################################################################################################
#Creating new Directory for the log files
powerAPILogDirDate="$(date -u | sed -e 's/ /_/g')" 
powerAPILogDirName=$logs/"PowerAPI_ALL_LOG_FILES_"$powerAPILogDirDate"_application_"$applicationsName"_arguments_"$otherCommandLineArguments
powerAPILogDirCreate="$(mkdir -p $powerAPILogDirName)"
eval=$powerAPILogDirCreate
echo "Log Directory $powerAPILogDirName is created"
###############################################################################################################################################


###############################################################################################################################################
##						ALL FUNCTIONS ARE HERE									     ##
###############################################################################################################################################
function getProcessID {
pgrep java | awk '{print $NF}' 
}

function callPowerAPI {
duration="$1"
PID="$2"
./powerapi modules procfs-cpu-simple monitor --frequency 1000 --pids $PID --agg max --console duration $duration >> power_for_$applicationsName.txt
}

function callPlotRealTimeGraphs {
while pgrep -x java > /dev/null ;
do
	sleep 1;
        tail -1  power_for_$applicationsName.txt; 
done | awk -F "=" '{print $NF; fflush()}'| feedGnuplot --lines --stream --title "Monioting of $applicationsName Power Consumption" --legend 0 "CPU" --xlen 10 --ylabel 'Power (Watts)' --xlabel 'Time (seconds)' --exit
}

function callAppropriateLanguage {
	echo "This function is reposnsible for calling the appropriate language to compile"
}
###############################################################################################################################################


###############################################################################################################################################
##						CALLING FUNCTIONS									     ##
###############################################################################################################################################
eval=$(java -jar $applicationPath $arguments) &
callPowerAPI $duration $(getProcessID)&
callPlotRealTimeGraphs   
wait $(jobs -p)
echo "Done exeuting script all resutls can be found in $powerAPILogDirName"
###############################################################################################################################################

#Move all the collected results in the proposer file
mv power_for_$applicationsName.txt $powerAPILogDirName

echo "Exiting..."

exit
