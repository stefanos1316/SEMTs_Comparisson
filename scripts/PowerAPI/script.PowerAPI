#!/bin/bash

#This script will execute and measure applications located inside this repo.

#Command-line parameters
#$1 -> Application's jar path for execution
#$2 -> Log files locations (full paht needed)
#$3 -> Give all the arguments that are necessary for the selected applications (command-line arguments num 2)


if [ "$1" == "-h" ] || [ "$1" == "-help" ]; then
	echo "\$1 -> Application's jar path for execution"
	echo "\$2 -> Log files locations (we suggest to use the 'results' directory found in our repository)"
	echo "\$3 -> Give duration is seconds, required as an argument from PowerAPI in order to monitor an appilcation"
	echo "\$4 -> Give all the arguments that are necessary for the selected applications (command-line arguments num 2)"
	exit
fi

if [ "$#" -lt 3 ]; then
	echo "Illegal number of command line arguments"
	exit
fi

#Drive to power-cli directory
cd ../powerapi-cli/bin/

applicationsName=$(echo $1 | awk -F "/" '{print $NF}' | awk -F "." '{print $1}')

otherCommandLineArguments=$(echo ${@:4} | tr ' ' '_')

#echo $applicationsName
#echo $otherCommandLineArguments


#Creating new Directory for the log files
powerAPILogDirDate="$(date -u | sed -e 's/ /_/g')" 
powerAPILogDirName=$2/"PowerAPI_ALL_LOG_FILES_"$powerAPILogDirDate"_application_"$applicationsName"_arguments_"$otherCommandLineArguments
powerAPILogDirCreate="$(mkdir -p $powerAPILogDirName)"
eval=$powerAPILogDirCreate
echo "Log Directory $powerAPILogDirName is created"

function getProcessID {
pgrep java | awk '{print $NF}' 
}

function callPowerAPI {
duration="$1"
echo "Duration is $duration"
./powerapi modules procfs-cpu-simple monitor --frequency 1000 --pids $(getProcessID) --agg max --console duration $duration >> power_for_$applicationsName.txt
}

function callPlotRealTimeGraphs {

while pgrep -x java > /dev/null ;
do
	sleep 1;
        tail -1  power_for_$applicationsName.txt; 
done | awk -F "=" '{print $NF; fflush()}'| feedGnuplot --lines --stream --title "Monioting of $applicationsName Power Consumption" --legend 0 "CPU" --xlen 10 --ylabel 'Power (Watts)' --xlabel 'Time (seconds)' --exit
}

eval=$(java -jar $1 ${@:4}) &
echo "$(getProcessID)"
callPowerAPI $3 &
callPlotRealTimeGraphs   
wait $(jobs -p)
echo "Done exeuting script all resutls can be found in $powerAPILogDirName"

#Move all the collected results in the proposer file
mv power_for_$applicationsName.txt $powerAPILogDirName

echo "Exiting..."

exit
