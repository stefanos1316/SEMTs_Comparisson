    	
    	if ( args.length < 3 ) {
    		System.out.println("The given number of command line arguments is wrong");
    		System.out.println("$1 -> the number of random int elements in an unsorted array");
    		System.out.println("$2 -> the number of iteration to execute each sorting algorithm");
    		System.out.println("${3,4,5,6,7} -> 3 for bubbleSort, 4 for selectionSort, 5 for insertionSort,");
    		System.out.println("6 for benchmarkQuickSort, and 7 for benchmarkMergeSort");
    		System.out.println("Please, try again!");
    		System.exit(1);
    	}
   	
    	if (Integer.parseInt(args[0]) > 1000000) {
    		System.out.println("Please provide a smaller number not larger than 1,000,000");
    		System.exit(2);
    	}
        
        int numberOfIterations = Integer.parseInt(args[1]);    
        int[] giveSortingAlgorithms = new int[args.length - 2];
        for (int i = 2; i < args.length; ++i) {
        	giveSortingAlgorithms[i-2] = Integer.parseInt(args[i]);
        }
        
        System.out.println("Printing new array " + Arrays.toString(giveSortingAlgorithms));
        
        //Iterate array with selection and run the sorting algorithms
        for ( int i = 0; i < giveSortingAlgorithms.length; ++ i) {
        	switch (giveSortingAlgorithms[i]) {
			case 3:
				System.out.println("Executing bubbleSort Algorithm " + numberOfIterations + " times");
				for (int j = 0; j < numberOfIterations; ++j) {
					int[] unsortedArray = createArrayWithRandomInts(Integer.parseInt(args[0]));
					bubbleSort(unsortedArray);
					System.out.println("Done with " + (j+1) + " execution");
				}
				break;
			
			case 4:
				System.out.println("Executing selectionSort Algorithm " + numberOfIterations + " times");
				for (int j = 0; j < numberOfIterations; ++j) {
					int[] unsortedArray = createArrayWithRandomInts(Integer.parseInt(args[0]));
					selectionSort(unsortedArray);
					System.out.println("Done with " + (j+1) + " execution");
				}
				break;

			case 5:
				System.out.println("Executing insertionSort Algorithm " + numberOfIterations + " times");
				for (int j = 0; j < numberOfIterations; ++j) {
					int[] unsortedArray = createArrayWithRandomInts(Integer.parseInt(args[0]));
					insertionSort(unsortedArray);
					System.out.println("Done with " + (j+1) + " execution");
				}
				break;

			case 6:
				System.out.println("Executing benchmarkQuickSort Algorithm " + numberOfIterations + " times");
				for (int j = 0; j < numberOfIterations; ++j) {
					int[] unsortedArray = createArrayWithRandomInts(Integer.parseInt(args[0]));
					benchmarkQuickSort(unsortedArray);
					System.out.println("Done with " + (j+1) + " execution");
				}
				break;

			case 7:
				System.out.println("Executing benchmarkMergeSort Algorithm " + numberOfIterations + " times");
				for (int j = 0; j < numberOfIterations; ++j) {
					int[] unsortedArray = createArrayWithRandomInts(Integer.parseInt(args[0]));
					benchmarkMergeSort(unsortedArray);
					System.out.println("Done with " + (j+1) + " execution");
				}
				break;

			default:
				break;
			}
        }
  	
	System.exit(1);     
